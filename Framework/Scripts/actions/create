#!/usr/bin/env python
# 
# Copyright (c) 2012 FadingRed LLC
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

from scriptlib.config import OptionParser
from scriptlib.i18n import Strings, Xib
import sys
import os

# global defines
# ----------------------------------------------------------------------

LOCALIZE_SYMBOL = os.environ.get('GREENWICH_LOCALIZATION_SYMBOL', 'NSLocalizedString') # localize symbol used in code


# main create strings function
# ----------------------------------------------------------------------

def create_strings(config):
  if os.path.exists(config.resources):
    for xibname in os.listdir(config.resources):
      if xibname.endswith('.xib'):
        xib = Xib(xibname, config)
        strings = Strings(xibname, config.lang, config)
        if xib.modification_time() > xib.generation_time():
          sys.stdout.write('Generating %s strings for %s\n' % (config.lang, xib.name))
          xib.generate(strings)
      
        # handle all languages other than the base language of the file
        # by integrating (or creating) the same strings files in that lproj
        # directory
        for langname in os.listdir(config.resources):
          if langname.endswith('.lproj'):
            lang = Strings(xibname, langname, config)
            if xib.generation_time() > lang.modification_time() and lang.name != config.lang:
              lang.integrate_changes(strings)

  # handle localizable.strings file
  if os.path.exists(config.source):
    latest = None # get the latest modification time of any source .m file
    for file in os.listdir(config.source):
      if file.endswith('.m'):
        mod = os.path.getmtime(os.path.join(config.source, file))
        if not latest or mod > latest: latest = mod
    localizable = Strings('Localizable', config.lang, config)
    if latest > localizable.modification_time():
      sys.stdout.write('Generating %s strings for source files\n' % (config.lang,))
      if not os.path.exists(config.resources): os.mkdir(config.resources)
      localizable.ensure_dir()
      os.system('find "%s" -name "*.m" -print0 |'
                'xargs -0 genstrings -s %s -o "%s"' % (config.source, LOCALIZE_SYMBOL, os.path.dirname(localizable.path())))
    # handle all languages other than the base language of the file
    # by integrating (or creating) the same strings files in that lproj
    # directory
    for langname in os.listdir(config.resources):
      if langname.endswith('.lproj'):
        lang = Strings(localizable.name, langname, config)
        if latest > lang.modification_time() and lang.name != config.lang:
          lang.integrate_changes(localizable)
      

# main function
# ----------------------------------------------------------------------

if __name__ == '__main__':
  usage = """usage: %%prog [options]
  Used to update strings files for all xibs and source files in a target."""
  create_strings(OptionParser(usage=usage).parse_config()[0])
